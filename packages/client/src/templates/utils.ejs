type ComponentRef = keyof typeof components;

function snakeToCamel(snakeCaseString: string): string {
  return snakeCaseString.replace(/(_\w)/g, (match) => match[1]?.toUpperCase() ?? '');
}

function camelToSnake(camel: string): string {
  return camel.replace(/([A-Z])/g, (match) => `_${match.toLowerCase()}`);
}

function cellParse(src: string): Cell {
  return Cell.fromHex(src);
}

function parseHexToBigInt(str: string) {
  return str.startsWith('-') ? BigInt(str.slice(1)) * -1n : BigInt(str);
}

async function prepareResponse<U>(promise: Promise<any>, orSchema?: any): Promise<U> {
  return await promise
      .then(obj => prepareResponseData<U>(obj, orSchema))
      .catch(async error => {
          let errorMessage: string;

          if (error && typeof error === 'object' && 'json' in error && typeof error.json === 'function') {
              try {
                  const errorJson = await error.json();
                  errorMessage =
                      typeof errorJson === 'string'
                          ? errorJson
                          : (errorJson?.error as string) || 'Unknown error';
              } catch (jsonParseError: unknown) {
                  if (jsonParseError instanceof Error) {
                      errorMessage = `Failed to parse error response: ${jsonParseError.message}`;
                  } else {
                      errorMessage = 'Failed to parse error response: Unknown parsing error';
                  }
              }
          } else if (error instanceof Error) {
              errorMessage = error.message || 'Unknown error without JSON';
          } else {
              errorMessage = 'Unknown error occurred';
          }

          throw new Error(errorMessage, { cause: error });
      });
}

function prepareResponseData<U>(obj: any, orSchema?: any): U {
  const ref = (orSchema && orSchema.$ref) as ComponentRef | undefined;
  const schema = ref ? components[ref] : orSchema;

  <% if (false) { // DO NOT FOR BUILD: For debugging error cases type mismatch %>
    if (schema) {
      if ((schema.type === "array" && !Array.isArray(obj)) || (!(schema.type === "array") && Array.isArray(obj))) {
        console.log('SCHEMA', schema);
        console.log('ARR', obj);
        throw new Error("Array type mismatch");
      } else if (schema.type !== 'array' && ((schema.type === "object" && typeof obj !== "object") || (!(schema.type === "object") && typeof obj === "object"))) {
        console.log('SCHEMA', schema);
        console.log('OBJ', obj);
        throw new Error("Object type mismatch");
      }
    }
<% } %>

  if (Array.isArray(obj)) {
    const itemSchema = schema && schema.items;

    return obj.map((item) => prepareResponseData(item, itemSchema)) as unknown as U;
  } else if (schema) {
    if (schema.type === "string") {
      if (schema.format === "address") {
        return Address.parse(obj as string) as U;
      }

      if (schema.format === "cell") {
        return obj && (cellParse(obj as string) as U);
      }

      if (schema['x-js-format'] === 'bigint') {
          return BigInt(obj as string) as U;
      }

      // maybe not used
      if (schema.format === "cell-base64") {
        return obj && (Cell.fromBase64(obj as string) as U);
      }
    }

    if (schema.type === "integer") {
      if (schema['x-js-format'] === "bigint") {
        return BigInt(obj as number) as U;
      }

      return Number(obj as number) as U;
    }

    if (schema.type === "object") {
      if (schema.format === "tuple-item") {
        
        switch (obj.type) {
          case "tuple":
          const itemSchema = schema.properties.tuple.items;
            return {
              type: "tuple",
              items: obj.tuple.map((item: any) => prepareResponseData(item, itemSchema))
            } as U;
          case "num":
            return {
              type: "int",
              value: parseHexToBigInt(obj.num)
            } as U;
          case "cell":
            return {
              type: "cell",
              cell: cellParse(obj.cell as string)
            } as U;
          case "slice":
            return {
              type: "slice",
              slice: cellParse(obj.slice as string)
            } as U;
          case "null":
            return {
              type: "null"
            } as U;
          case "nan":
            return {
              type: "nan"
            } as U;
          default:
            throw new Error(`Unknown tuple item type: ${obj.type}`);
        }
      }
    }
  }
  
  // case of non tuple-item object
  if (obj !== null && typeof obj === "object") {
    return Object.keys(obj).reduce(
      (acc, key) => {
        const objSchema = schema?.properties && schema.properties[key];

        const camelCaseKey = snakeToCamel(key);

        acc[camelCaseKey] = prepareResponseData(obj[key], objSchema);
        return acc;
      },
      {} as Record<string, unknown>,
    ) as U;
  } 

  return obj as unknown as U;
}

function prepareRequestData(data: any, orSchema?: any): any {
  const ref = (orSchema && orSchema.$ref) as ComponentRef | undefined;
  const schema = ref ? components[ref] : orSchema;

  if (Array.isArray(data)) {
      const itemSchema = schema && schema.items;

      return data.map(item => prepareRequestData(item, itemSchema));
  } else if (schema) {
      if (schema.type === 'string') {
          if (schema.format === 'address') {
              return (data as Address).toRawString();
          }

          if (schema.format === 'cell') {
              return (data as Cell).toBoc().toString('hex');
          }

          if (schema.format === 'cell-base64') {
              return (data as Cell).toBoc().toString('base64');
          }

          if (schema['x-js-format'] === 'bigint') {
              return (data as bigint).toString();
          }
      }
  }
  
  if (data !== null && typeof data === 'object') {
      return Object.keys(data).reduce(
          (acc, key) => {
              const objSchema = schema?.properties && schema.properties[key];

              const snakeCaseKey = camelToSnake(key);

              acc[snakeCaseKey] = prepareRequestData(data[key], objSchema);
              return acc;
          },
          {} as Record<string, unknown>
      );
  }
  return data;
}
